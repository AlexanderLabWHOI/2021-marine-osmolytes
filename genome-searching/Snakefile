configfile: "config.yaml"
import glob
import io
import os
import pandas as pd
import numpy as np
import pathlib
from snakemake.exceptions import print_exception, WorkflowError

BACT_ACCESSION_LIST = config['bacterial_accession']
BACT_GENOMES_DIR = config['bacterial_genomes_directory']
OUTDIR = config['output_directory']
MMETSP_DIR = config['mmetsp_directory']

BACT_GENOMES, = glob_wildcards(os.path.join(BACT_GENOMES_DIR,"{genome}.faa"))
MMETSP_TRANS, = glob_wildcards(os.path.join(MMETSP_DIR, "{mmetsp}.pep.fa"))
MMETSP_TRANS.remove('MMETSP-reference')
SCRATCHDIR = config['scratch_directory']
METABOLITE_DIR = config['metabolite_directory']
METABOLITES, = glob_wildcards(os.path.join(METABOLITE_DIR, '{metabolite}'))
MET_DICT = {}
KO_FAM_DIR = config['kofamscan_db']


for i in METABOLITES: 
    MET_GENES = list(pd.read_csv(os.path.join(METABOLITE_DIR, i), header=None)[0])
    MET_DICT[i]=MET_GENES

rule all:
    input:
#        expand(os.path.join(OUTDIR, 'ko_hmms', '{metabolite}', '{genome}','done'), metabolite = METABOLITES, genome  = BACT_GENOMES), 
#        expand(os.path.join(OUTDIR, 'ko_hmms', '{metabolite}', '{mmetsp}','done'), metabolite = METABOLITES, mmetsp  = MMETSP_TRANS),
#        expand(os.path.join(OUTDIR, 'ko_tables', '{metabolite}', '{genome}.csv'), metabolite = METABOLITES, genome  = BACT_GENOMES),
#        expand(os.path.join(OUTDIR, 'ko_tables', '{metabolite}', '{mmetsp}.csv'), metabolite = METABOLITES, mmetsp  = MMETSP_TRANS),
        expand(os.path.join(OUTDIR, 'ko_tables', '{metabolite}_{bac_euk}.csv'), metabolite = METABOLITES, bac_euk = ['bact', 'mmetsp']),
#        os.path.join('GToBacterialTree2', 'GToBacterialTree2.tre')

rule kofamscan:
    input: genome = os.path.join(BACT_GENOMES_DIR, '{genome}.faa'), metabolite_file = os.path.join(METABOLITE_DIR, '{metabolite}') 
    output: final = os.path.join(OUTDIR, 'ko_hmms', '{metabolite}', '{genome}', 'done'), 
    threads: 2
    conda: 'envs/kofamscan.yaml'
    params: tempdir=os.path.join(OUTDIR, 'ko_hmms', '{metabolite}','{genome}')+'/', kofam_dir = os.path.join(KO_FAM_DIR, 'profiles')+'/'
    shell:
        '''
        mkdir -p {params.tempdir}
        for x in $(cat {input.metabolite_file})
            do
            hmmsearch -o /dev/null --tblout {params.tempdir}$x -T 0 --cpu 2 {params.kofam_dir}$x.hmm {input.genome} 
        done
        touch {output}
        '''

rule kofamscan_euk: 
    input: genome = os.path.join(MMETSP_DIR, '{mmetsp}.pep.fa'), metabolite_file = os.path.join(METABOLITE_DIR, '{metabolite}') 
    output: final = os.path.join(OUTDIR, 'ko_hmms', '{metabolite}', '{mmetsp}', 'done'), 
    threads: 15
    conda: 'envs/kofamscan.yaml'
    params: tempdir=os.path.join(OUTDIR, 'ko_hmms', '{metabolite}','{mmetsp}')+'/', kofam_dir = os.path.join(KO_FAM_DIR, 'profiles')+'/'
    shell:
        '''
        mkdir -p {params.tempdir}
        for x in $(cat {input.metabolite_file})
            do
            hmmsearch -o /dev/null --tblout {params.tempdir}$x -T 0 --cpu 1 {params.kofam_dir}$x.hmm {input.genome} 
        done
        touch {output}
        '''
#rule parse_hmmsearch_euk:
#    input: os.path.join(OUTDIR, 'ko_hmms', '{metabolite}', '{mmetsp}', 'done')
 #   output: os.path.join(OUTDIR, 'ko_tables', '{metabolite}', '{mmetsp}.csv')
  #  params: os.path.join(OUTDIR, 'ko_hmms', '{metabolite}', '{mmetsp}')
   # conda:
  #      "envs/biopython.yaml"
  #  script:
  #      "scripts/parse_hmmsearch.py"


rule parse_hmmsearch:
    input: os.path.join(OUTDIR, 'ko_hmms', '{metabolite}', '{genome}', 'done')
    output: os.path.join(OUTDIR, 'ko_tables', '{metabolite}', '{genome}.csv')
    params: os.path.join(OUTDIR, 'ko_hmms', '{metabolite}', '{genome}')
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/parse_hmmsearch.py"

rule create_genome_table_bact:
    input:  genomes = expand(os.path.join(OUTDIR, 'ko_tables', '{metabolite}', '{genome}.csv'), metabolite = METABOLITES, genome = BACT_GENOMES), 
    output: os.path.join(OUTDIR, 'ko_tables', '{metabolite}_bact.csv'), 
    params: 
        genome_ko_table_dir = os.path.join(OUTDIR, 'ko_tables', '{metabolite}'), 
        kofamlist = os.path.join(config['kofamscan_db'],'ko_list'),
        ko_list = os.path.join(METABOLITE_DIR, '{metabolite}'),  
        header = 'GCF', 
    run: 
        KO_index = pd.read_csv(params['ko_list'], sep='\t', index_col=0, header=None).index 
        KO_index = list(set(KO_index))
        kofamlist = pd.read_csv(params['kofamlist'], sep='\t', index_col=0)
        out_df = pd.DataFrame(columns=KO_index)
        for csv_file in glob.glob(os.path.join(params['genome_ko_table_dir'], params['header']+'*csv')):
            df = pd.read_csv(csv_file, sep='\t', index_col=0)
            for k in KO_index:
                column = None
                if kofamlist.loc[k, 'score_type']=='full':
                    column = 'full_bitscore'
                    ref_val = float(kofamlist.loc[k,'threshold'])
                elif kofamlist.loc[k, 'score_type']=='domain':
                    column = 'domain_bitscore'
                    ref_val = float(kofamlist.loc[k,'threshold'])
                else:
                    column = 'full_bitscore'
                    ref_val = 200 
                if df.loc[k,column] > ref_val:
                    out_df.loc[csv_file, k]=1
                else:
                    out_df.loc[csv_file,k]=0
        out_df.to_csv(output[0])

rule create_genome_table_mmetsp:
    input: genomes =expand(os.path.join(OUTDIR, 'ko_tables', '{metabolite}', '{mmetsp}.csv'), metabolite = METABOLITES, mmetsp = MMETSP_TRANS), 
    output: os.path.join(OUTDIR, 'ko_tables', '{metabolite}_mmetsp.csv')     
    params:
        genome_ko_table_dir = os.path.join(OUTDIR, 'ko_tables', '{metabolite}'), 
        kofamlist = os.path.join(config['kofamscan_db'],'ko_list'), 
        ko_list = os.path.join(METABOLITE_DIR, '{metabolite}'), header = 'MMETSP',
    run:
        KO_index = pd.read_csv(params['ko_list'], sep='\t', index_col=0, header=None).index 
        KO_index = list(set(KO_index))
        kofamlist = pd.read_csv(params['kofamlist'], sep='\t', index_col=0)
        out_df = pd.DataFrame(columns=KO_index)
        for csv_file in glob.glob(os.path.join(params['genome_ko_table_dir'], params['header']+'*csv')):
            df = pd.read_csv(csv_file, sep='\t', index_col=0)
            for k in KO_index:
                column = None
                if kofamlist.loc[k, 'score_type']=='full':
                    column = 'full_bitscore'
                    ref_val = float(kofamlist.loc[k,'threshold'])
                elif kofamlist.loc[k, 'score_type']=='domain':
                    column = 'domain_bitscore'
                    ref_val = float(kofamlist.loc[k,'threshold'])
                else:
                    column = 'full_bitscore'
                    ref_val = 200
                if df.loc[k,column] > ref_val:
                    out_df.loc[csv_file, k]=1
                else:
                    out_df.loc[csv_file,k]=0
        out_df.to_csv(output[0])


rule create_phylogeny:
    input: BACT_ACCESSION_LIST 
    output: os.path.join('GToBacterialTree2', 'GToBacterialTree2.tre') 
    params: other = '-H Universal', out = 'GToBacterialTree2'
    conda: 'gtotree.yaml'
    shell:
        """
        GToTree -a {input} {params.other} -t -j 50 -o {params.out}
        """
